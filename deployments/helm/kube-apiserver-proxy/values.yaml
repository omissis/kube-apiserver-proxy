# Default values for kube-apiserver-proxy.

replicaCount: 1

image:
  repository: kube-apiserver-proxy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
  tls: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

clusterRole:
  rules: []

app:
  configFile:
    middlewares:
      bodyFilter:
        enabled: false
        config:
          - methods: ["PATCH", "POST"]
            paths:
              - path: "/api/v1/namespaces/*/pods/*"
                type: "glob" # optional
            filter: "{\"metadata\":{\"labels\":{\"app\": \"*\"}}}"

queries:
  - name: listPodsinNamespace
    method: GET
    regex: "^/api/v1/namespaces/.+/pods$"
    responseTransform:
      format: "jq" # values: jq or jsonpath
      query: '{"items":[.items[].metadata | {"name": .name, "namespace": .namespace}],"count":.items|length}'
  - name: listServices
    method: GET
    regex: "^/api/v1/services$"
    responseTransform:
      format: "jq" # values: jq or jsonpath
      query: '{"items":[{"name": .items[].metadata.name}],"count":.items|length}'
  - name: updateRole
    method: PUT
    regex: "^/apis/rbac.authorization.k8s.io/v1/namespaces/.+/roles/.+$"
    requestGuard:
      format: "jq" # values: jq or jsonpath
      query: ''
    responseTransform:
      format: "jq" # values: jq or jsonpath
      query: '{"items":[{"name": .items[].metadata.name}],"count":.items|length}'
  - name: default
    method: "*"
    regex: "^/api/v1/.+$"
    responseTransform:
      format: "jq" # values: jq or jsonpath
      query: '{"items":[{"name": .items[].metadata.name}],"count":.items|length}'
